# docker-compose.yml

services:
  app:
    container_name: kvstore-app   # 👈 显式指定容器名称
    build:
      context: ..                  # 👈 以docker-compose.yml所在目录的上级目录（../）作为项目根目录
      dockerfile: docker/Dockerfile
    develop:
      watch:
        - action: sync
          path: ../web
          target: /app/web
        - action: sync+restart
          path: ../config/config.json     # app配置文件
          target: /app/config/config.json
        - action: sync+restart
          path: ../config/locales        # app本地化配置文件：翻译文件
          target: /app/config/locales               
        - action: rebuild
          path: ../cmd
        - action: rebuild
          path: ../interval        
    environment:
      - TZ=Asia/Shanghai
    ports:
      - "8080:8080"  # 主业务接口
      - "6060:6060"  # pprof 接口
    networks:
      - kvstore_net
    healthcheck:
      # 检查业务服务是否正常（8080 端口）
      test: ["CMD", "curl", "-f", "http://0.0.0.0:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  nginx:
    container_name: kvstore-nginx  # 👈 显式指定容器名称
    build:
      context: ..  # 以docker-compose.yml所在目录的上级目录（../）作为上下文
      dockerfile: config/nginx/Dockerfile.nginx  # 指定 Dockerfile 的路径
    develop:
      watch:
        - action: sync+restart
          path: ../config/nginx
          target: /etc/nginx
    ports:
      - "80:80"  # 将 nginx 对外暴露在 80 端口
      - "443:443"  # 将 nginx 对外暴露在 443 端口
    depends_on:
      app:
        condition: service_healthy
    volumes:
      - ../config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ../config/nginx/certs:/etc/nginx/certs
    healthcheck:
      # 检查业务服务是否正常（80 端口）
      test: ["CMD", "curl", "-f", "http://0.0.0.0:80/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - kvstore_net

networks:
  kvstore_net:
    driver: bridge
    attachable: true